# .gitlab-ci.yml
default:
  image: node:lts-alpine

variables:
  FF_USE_FASTZIP: 'true'
  # These can be specified per job or per pipeline
  ARTIFACT_COMPRESSION_LEVEL: 'fast'
  CACHE_COMPRESSION_LEVEL: 'fast'

stages:
  - install_deps
  - build
  # - install_deps_demo
  # - build_demo
  # - lint
  # - test
  - deploy

# Caches
.node_modules-cache: &node_modules-cache
  key:
    files:
      - yarn.lock
  paths:
    - node_modules
  policy: pull

.node_modules-cache-demo: &node_modules-cache-demo
  key:
    files:
      - demo/yarn.lock
  paths:
    - demo/node_modules
  policy: pull

.yarn-cache: &yarn-cache
  key: yarn-$CI_JOB_IMAGE
  paths:
    - .yarn

.yarn-cache-demo: &yarn-cache-demo
  key: yarn-demo-$CI_JOB_IMAGE
  paths:
    - demo/.yarn

.test-cache: &test-cache
  key: test-$CI_JOB_IMAGE
  paths:
    - .jestcache
    - demo/.jestcache
  policy: pull-push

.build-cache: &build-cache
  key: build-$CI_JOB_IMAGE
  paths:
    - .cache
    - build
  policy: pull-push

Install Dependencies:
  stage: install_deps
  script:
    - yarn install --cache-folder .yarn
  cache:
    - <<: *node_modules-cache
      policy: pull-push # We override the policy
    - <<: *yarn-cache # This is not required if your internet speed is good or if you use a local npm registry.

# Install Demo Dependencies:
#   stage: install_deps_demo
#   script:
#     - cd demo
#     - yarn install --cache-folder .yarn
#   cache:
#     - <<: *build-cache
#     - <<: *node_modules-cache-demo
#       policy: pull-push # We override the policy
#     - <<: *yarn-cache-demo # This is not required if your internet speed is good or if you use a local npm registry.

Build:
  stage: build
  script:
    - yarn build
  cache:
    - <<: *node_modules-cache
    - <<: *build-cache
  artifacts:
    paths:
      - dist

# # Webpack build is really slow
# Build Demo:
#   stage: build_demo
#   # Webpack build is really slow, so only running this for releases
#   # to verify the SDK can be imported correctly
#   only:
#     - tags
#   script:
#     - cd demo
#     - yarn build
#   cache:
#     - <<: *node_modules-cache-demo

# Lint:
#   stage: lint
#   script:
#     - yarn lint
#     - yarn format:check
#   cache:
#     - <<: *node_modules-cache
#     - <<: *node_modules-cache-demo

# Test:
#   stage: test
#   script:
#     - yarn test --cacheDirectory ".jestcache"
#     - cd demo
#     - yarn test --cacheDirectory ".jestcache"
#   cache:
#     - <<: *node_modules-cache
#     - <<: *node_modules-cache-demo
#     - <<: *test-cache

Deploy:
  stage: deploy
  only:
    - tags
  script:
    - echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}'>.npmrc 
    - npm publish --access public
  cache:
    - <<: *node_modules-cache
    - <<: *build-cache
  artifacts:
    paths:
      - dist
